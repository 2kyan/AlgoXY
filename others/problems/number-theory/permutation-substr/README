Problem:
Given a string A and another string B. Find whether any permutation of B exists as a substring of A.

Normally, the solution demands a bitmap to count the number of each unique chars of B (see [1]), then slide a window along A.

However, by using Foundamental thorem of arithmetic (https://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic), we can build the prime finger-print of B, the slide window along A to compare the finger-print.

Reference
[1] C++ program to test two strings are permutation of each other.

#include <bits/stdc++.h>
using namespace std;
# define NO_OF_CHARS 256

bool arePermutation(string str1, string str2) {
    // Create 2 count arrays and initialize
    // all values as 0
    int count1[NO_OF_CHARS] = {0};
    int count2[NO_OF_CHARS] = {0};
    int i;

    // For each character in input strings,
    // increment count in the corresponding
    // count array
    for (i = 0; str1[i] && str2[i];  i++) {
        count1[str1[i]]++;
        count2[str2[i]]++;
    }

    // If both strings are of different length.
    // Removing this condition will make the
    // program fail for strings like "aaca"
    // and "aca"
    if (str1[i] || str2[i])
      return false;

    // Compare count arrays
    for (i = 0; i < NO_OF_CHARS; i++)
        if (count1[i] != count2[i])
            return false;

    return true;
}

int main() {
    string str1 = "geeksforgeeks";
    string str2 = "forgeeksgeeks";
    if ( arePermutation(str1, str2) )
      printf("Yes");
    else
      printf("No");

    return 0;
}